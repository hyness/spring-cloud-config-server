name: Deploy artifacts to Dockerhub

on:
  workflow_dispatch:
    inputs:
      registry:
        description: Docker registry to use
        required: false
      triggered:
        description: Whether build was manually triggered
        required: false
        default: 'true'
  workflow_run:
    workflows: ['CI']
    branches: [main, '3.1']
    types:
      - completed

env:
  REGISTRY: docker.io
  DEFAULT_JAVA_VERSION: 17
  DEFAULT_JAVA_TYPE: jre
  BUILDER_TAG: tiny

jobs:
  create-variables:
    if: github.event.workflow_run.conclusion == 'success' || github.event.inputs.triggered == 'true'
    name: Create build variables
    runs-on: ubuntu-latest
    outputs:
      cloud-config-build-version: ${{ steps.create-variables-output.outputs.cloud-config-build-version }}
      cloud-config-build-version-short: ${{ steps.create-variables-output.outputs.cloud-config-build-version-short }}
      cloud-config-latest-version: ${{ steps.create-variables-output.outputs.cloud-config-latest-version }}
      cloud-config-latest-version-short: ${{ steps.create-variables-output.outputs.cloud-config-latest-version-short }}
      registry: ${{ steps.create-variables-output.outputs.registry }}
      short-sha: ${{ steps.create-variables-output.outputs.short-sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.workflow_run.head_branch }}
      - name: Update the registry
        if: github.event.inputs.registry != null
        run: echo "REGISTRY=${{ github.event.inputs.registry }}" >> $GITHUB_ENV
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
      - name: Set latest cloud config version
        run: echo "CLOUD_CONFIG_LATEST_VERSION=`curl -s https://search.maven.org/solrsearch/select\?q\=g:%22org.springframework.cloud%22%20AND%20a:%22spring-cloud-config-server%22 | jq -r '.response.docs[0].latestVersion'`" >> $GITHUB_ENV
      - name: Set build cloud config version
        run: echo "CLOUD_CONFIG_BUILD_VERSION=`./gradlew dependencyInsight --dependency org.springframework.cloud:spring-cloud-config-server | grep 'org.springframework.cloud:spring-cloud-config-server:' | tail -1 | cut -d ':' -f 3-`" >> $GITHUB_ENV
      - name: Create outputs
        id: create-variables-output
        run: |
          echo "cloud-config-build-version=`echo $CLOUD_CONFIG_BUILD_VERSION`" >> $GITHUB_OUTPUT
          echo "cloud-config-build-version-short=`echo $CLOUD_CONFIG_BUILD_VERSION | cut -d. -f1,2`" >> $GITHUB_OUTPUT
          echo "cloud-config-latest-version=`echo $CLOUD_CONFIG_LATEST_VERSION`" >> $GITHUB_OUTPUT
          echo "cloud-config-latest-version-short=`echo $CLOUD_CONFIG_LATEST_VERSION | cut -d. -f1,2`" >> $GITHUB_OUTPUT
          echo "registry=`echo $REGISTRY`" >> $GITHUB_OUTPUT
          echo "short-sha=`echo $GITHUB_SHA | cut -c1-8`" >> $GITHUB_OUTPUT

  build-and-deploy-to-dockerhub:
    if: github.event.workflow_run.conclusion == 'success' || github.event.inputs.triggered == 'true'
    name: Push verified Java ${{ matrix.jvmVersion }} ${{ matrix.jvmType }} OCI image to ${{ needs.create-variables.outputs.registry }}
    needs: create-variables
    runs-on: ubuntu-latest
    env:
      CLOUD_CONFIG_BUILD_VERSION: ${{ needs.create-variables.outputs.cloud-config-build-version }}
      CLOUD_CONFIG_BUILD_VERSION_SHORT: ${{ needs.create-variables.outputs.cloud-config-build-version-short }}
      CLOUD_CONFIG_LATEST_VERSION: ${{ needs.create-variables.outputs.cloud-config-latest-version }}
      CLOUD_CONFIG_LATEST_VERSION_SHORT: ${{ needs.create-variables.outputs.cloud-config-latest-version-short }}
      REGISTRY: ${{ needs.create-variables.outputs.registry }}
      JAVA: ${{ matrix.jvmType }}${{ matrix.jvmVersion }}
      SHORT_SHA: ${{ needs.create-variables.outputs.short-sha }}
    strategy:
      matrix:
        builder: ["paketobuildpacks/builder:tiny", "dashaun/builder-arm:tiny"]
        jvmType: [jre, jdk]
        jvmVersion: [17, 20]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.workflow_run.head_branch }}
      - name: Create the IMAGE environment variable
        run: echo "IMAGE=$REGISTRY/$GITHUB_REPOSITORY" >> $GITHUB_ENV
      - name: Create OCI image tags
        run: echo "DOCKER_TAGS=$IMAGE:$CLOUD_CONFIG_BUILD_VERSION-$JAVA,$IMAGE:$CLOUD_CONFIG_BUILD_VERSION_SHORT-$JAVA" >> $GITHUB_ENV
      - name: Add version default OCI image tag
        if: matrix.jvmVersion == env.DEFAULT_JAVA_VERSION && matrix.jvmType == env.DEFAULT_JAVA_TYPE
        run: echo "DOCKER_TAGS=$DOCKER_TAGS,$IMAGE:$CLOUD_CONFIG_BUILD_VERSION,$IMAGE:$CLOUD_CONFIG_BUILD_VERSION_SHORT" >> $GITHUB_ENV
      - name: Add ${{ env.JAVA }} default OCI image tag
        if: env.CLOUD_CONFIG_BUILD_VERSION_SHORT == env.CLOUD_CONFIG_LATEST_VERSION_SHORT
        run: echo "DOCKER_TAGS=$DOCKER_TAGS,$IMAGE:$JAVA" >> $GITHUB_ENV
      - name: Add latest OCI image tag
        if: (env.CLOUD_CONFIG_BUILD_VERSION_SHORT == env.CLOUD_CONFIG_LATEST_VERSION_SHORT) && matrix.jvmVersion == env.DEFAULT_JAVA_VERSION && matrix.jvmType == env.DEFAULT_JAVA_TYPE
        run: echo "DOCKER_TAGS=$DOCKER_TAGS,$IMAGE:latest" >> $GITHUB_ENV
      - name: Setup GitHub Container Registry credentials
        if: env.REGISTRY == 'ghcr.io'
        run: |
          echo "DOCKER_USERNAME=${{ github.actor }}" >> $GITHUB_ENV
          echo "DOCKER_PASSWORD=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
      - name: Setup Docker Hub credentials
        if: env.REGISTRY == 'docker.io'
        run: |
          echo "DOCKER_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" >> $GITHUB_ENV
          echo "DOCKER_PASSWORD=${{ secrets.DOCKERHUB_TOKEN }}" >> $GITHUB_ENV
      - name: Set up JDK ${{ matrix.jvmVersion }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.jvmVersion }}
          distribution: 'temurin'
      - name: Build and push Java ${{ matrix.jvmVersion }} ${{ matrix.jvmType }} OCI image
        if: ${{ matrix.builder == 'paketobuildpacks/builder:tiny' }}
        run: >
          ./gradlew bootBuildImage
          -PjvmType=${{ matrix.jvmType }}
          -PjdkVersion=${{ matrix.jvmVersion }}
          -PdockerUsername=$DOCKER_USERNAME
          -PdockerPassword=$DOCKER_PASSWORD
          -PdockerTags=$DOCKER_TAGS
          --builder=${{ matrix.builder }}
          --imageName=$IMAGE:$CLOUD_CONFIG_BUILD_VERSION-$SHORT_SHA-$JAVA
          --publishImage
      - name: Build and push Java ${{ matrix.jvmVersion }} ${{ matrix.jvmType }} OCI ARM image
        if: ${{ matrix.builder == 'dashaun/builder-arm:tiny' }}
        uses: uraimo/run-on-arch-action@v2
        with:
          arch: armv7
          distro: alpine_latest
          githubToken: ${{ github.token }}
          env: | 
            DOCKER_USERNAME: ${{ env.DOCKER_USERNAME }}
            DOCKER_PASSWORD: ${{ env.DOCKER_PASSWORD }}
            JAVA_HOME: ${{ env.JAVA_HOME }}
#            BUILDER: ${{ matrix.builder }}
#            DOCKER_USERNAME: ${{ env.DOCKER_USERNAME }}
#            DOCKER_PASSWORD: ${{ env.DOCKER_PASSWORD }}
#            IMAGE_NAME: ${{ env.IMAGE }}:${{ env.CLOUD_CONFIG_BUILD_VERSION }}-${{ env.SHORT_SHA }}-${{ env.JAVA }}
#            JVM_TYPE=${{ matrix.jvmType }}
#            JDK_VERSION=${{ matrix.jvmVersion }}
          run: >
            ./gradlew bootBuildImage
            -PjvmType=jre
            -PjdkVersion=17
            -PdockerUsername=$DOCKER_USERNAME
            -PdockerPassword=$DOCKER_PASSWORD
            -PdockerTags=arm-test
            --builder=dashaun/builder-arm:tiny
            --imageName=ghcr.io/hyness/spring-cloud-config-server
            --publishImage
