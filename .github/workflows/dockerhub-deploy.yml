name: dockerhub deploy

on:
  workflow_run:
    workflows: ['CI']
    branches: [main, '[2-9].[0-9]']
    types:
      - completed

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository }}
  PLATFORMS: linux/amd64,linux/arm/v7,linux/arm64/v8,linux/ppc64le

jobs:
  create-variables:
    name: Create short commit sha
    runs-on: ubuntu-latest
    outputs:
      short-sha: ${{ steps.short-sha-output.outputs.short-sha }}
    steps:
      - name: Add variables to env
        run: |
          SEMVER=$(./gradlew dependencyInsight --dependency org.springframework.cloud:spring-cloud-config-server | grep 'org.springframework.cloud:spring-cloud-config-server:' | tail -1 | cut -d ':' -f 3-)
          SEMVER_MINOR=$(echo $SEMVER | cut -d. -f1,2)
          echo "CLOUD_CONFIG_VERSION=$SEMVER" >> $GITHUB_ENV
          echo "CLOUD_CONFIG_VERSION_SHORT=$SEMVER_MINOR" >> $GITHUB_ENV
          echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`" >> $GITHUB_ENV
      - name: Create variable output
        id: short-sha-output
        run: |
          echo "::set-output name=cloud-config-version::${{ env.CLOUD_CONFIG_VERSION }}"
          echo "::set-output name=cloud-config-version-short::${{ env.CLOUD_CONFIG_VERSION_SHORT }}"
          echo "::set-output name=short-sha::${{ env.SHORT_SHA }}"

  build-and-deploy-to-dockerhub:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    name: Push verified image to dockerhub
    needs: create-variables
    runs-on: ubuntu-latest
    env:
      CLOUD_CONFIG_VERSION: ${{ needs.create-variables.outputs.cloud-config-version }}
      CLOUD_CONFIG_VERSION_SHORT: ${{ needs.create-variables.outputs.cloud-config-version-short }}
      JAVA: ${{ matrix.jvmVersion }}${{ matrix.jvmType }}
      JVM_TYPE: ${{ matrix.jvmVersion }}
      JVM_VERSION: ${{ matrix.jvmVersion }}
      SHORT_SHA: ${{ needs.create-variables.outputs.short-sha }}
    strategy:
      matrix:
        jvmType: [jre, jdk]
        jvmVersion: [8, 11, 17]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.workflow_run.head_branch }}
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v
      - name: Build and push java ${{ matrix.jvmVersion }} ${{ matrix.jvmType }} docker image
        uses: docker/build-push-action@v2
        with:
          build-args: |
            JVM_VERSION={{ matrix.jvmVersion }}
            JVM_TYPE=${{ matrix.jvmType }}
          context: .
          platforms: ${{ env.PLATFORMS }}
          no-cache: true
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.CLOUD_CONFIG_VERSION }}-${{ env.JAVA }},
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.CLOUD_CONFIG_VERSION_SHORT }}-${{ env.JAVA }},
      - name: Build and push java ${{ matrix.jvmVersion }} ${{ matrix.jvmType }} default OCI image
        if: ${{ github.event.workflow_run.head_branch == 'main' && && matrix.jvmVersion = '11'}}
        uses: docker/build-push-action@v2
        with:
          build-args: |
            JVM_VERSION={{ matrix.jvmVersion }}
            JVM_TYPE=${{ matrix.jvmType }}
          context: .
          platforms: ${{ env.PLATFORMS }}
          no-cache: true
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.JAVA }}
      - name: Build and push latest docker image
        if: ${{ github.event.workflow_run.head_branch == 'main' && matrix.jvmVersion = '11' && matrix.jvmType = 'jre'}}
        uses: docker/build-push-action@v2
        with:
          build-args: |
            JVM_VERSION={{ matrix.jvmVersion }}
            JVM_TYPE=${{ matrix.jvmType }}
          context: .
          platforms: ${{ env.PLATFORMS }}
          no-cache: true
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
